name: Deploy to GCP

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: leafloaf
  REGION: us-central1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run personalization tests
        run: |
          python run_all_personalization_tests.py
        continue-on-error: false

      - name: Run dietary intelligence tests
        run: |
          python -m pytest tests/unit/test_dietary_cultural_intelligence.py -v
        continue-on-error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and push container
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
          docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 2 \
            --timeout 60 \
            --concurrency 100 \
            --set-env-vars "SPANNER_INSTANCE_ID=leafloaf-graph,SPANNER_DATABASE_ID=leafloaf-graphrag,GCP_PROJECT_ID=$PROJECT_ID,ENVIRONMENT=production" \
            --service-account leafloaf-sa@$PROJECT_ID.iam.gserviceaccount.com

      - name: Get service URL
        run: |
          echo "Service deployed to:"
          gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and push container
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME-staging:pr-${{ github.event.pull_request.number }} .
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME-staging:pr-${{ github.event.pull_request.number }}

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy $SERVICE_NAME-staging-pr-${{ github.event.pull_request.number }} \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME-staging:pr-${{ github.event.pull_request.number }} \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --timeout 60 \
            --concurrency 50 \
            --set-env-vars "SPANNER_INSTANCE_ID=leafloaf-graph,SPANNER_DATABASE_ID=leafloaf-graphrag-staging,GCP_PROJECT_ID=$PROJECT_ID,ENVIRONMENT=staging" \
            --service-account leafloaf-sa@$PROJECT_ID.iam.gserviceaccount.com \
            --no-traffic

      - name: Comment PR with staging URL
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const url = execSync(`gcloud run services describe ${{ env.SERVICE_NAME }}-staging-pr-${{ github.event.pull_request.number }} --platform managed --region ${{ env.REGION }} --format 'value(status.url)'`).toString().trim();
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Staging deployment ready!\n\nURL: ${url}\n\nThis deployment will be automatically cleaned up when the PR is merged or closed.`
            })

  cleanup-staging:
    name: Cleanup Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Delete staging service
        run: |
          gcloud run services delete $SERVICE_NAME-staging-pr-${{ github.event.pull_request.number }} \
            --region $REGION \
            --platform managed \
            --quiet || true